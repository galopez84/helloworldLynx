pipeline {
    agent { label 'linux'}

     stages {
        stage('Get Code') {
            steps {
                // Obtener código del repo
                git branch: 'master', url: 'git@github.com:galopez84/helloworldLynx.git'
            }
        }
    
        stage('Build') {
           steps {
            sh '''
              echo 'Eyyy, esto es Python. No hay que compilar nada!!!'
	          echo WORKSPACE
              ls -lrt
              '''
           }
        }

        stage('Start API') {
            steps {
                sh '''
                         export FLASK_APP=app/api.py
                          export FLASK_ENV=development
                          export URL_WIREMOCK=https://repo1.maven.org/maven2/org/wiremock/wiremock-standalone/3.3.1/wiremock-standalone-3.3.1.jar
                          yum install pip -y
                          pip install flask
                          pip install pytest
                          nohup flask run &
                          export WIREMOCK_JAR=/root/wiremock/wiremock-standalone-3.3.1.jar
                          wget -q -O $WIREMOCK_JAR $URL_WIREMOCK
                          nohup java -jar $WIREMOCK_JAR --port 9090 --root-dir $WORKSPACE/test/wiremock &
                   '''      
                 script {
                        def flaskRunning = false
                        def mockRunning = false
                        while (!mockRunning ) {
                            try {
                                sh 'curl http://localhost:9090'
                                mockRunning = true
                            } catch (Exception e) {
                                echo "Esperando a que el servicio esté en ejecución..."
                                sleep time: 1, unit: 'SECONDS'
                            }
                            while (!flaskRunning) {
                            try {
                                sh 'curl http://localhost:5000'
                                flaskRunning = true
                            } catch (Exception e) {
                                echo "Esperando a que el servicio esté en ejecución..."
                                sleep time: 1, unit: 'SECONDS'
                            }
                                                }
                                            }
                    }
            }
        }
        stage('Unit') {
            steps {
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    sh '''
                              export PYTHONPATH=$WORKSPACE
                              pytest --junitxml=result-unit.xml test/unit
                              whoami
                              uname -a
                              echo ${WORKSPACE}
                    '''
               }
            }
        }   


        stage('Rest') {
            steps {
                sh '''

                          export PYTHONPATH=%WORKSPACE%
                          pytest --junitxml=result-rest.xml test/rest
                          whoami
                          uname -a
                          echo ${WORKSPACE}
                          ls -lrt
                '''
            }    
        }

        stage('Results') {
            steps {
                junit 'result*.xml' 
            }
        }
     
    }
}
