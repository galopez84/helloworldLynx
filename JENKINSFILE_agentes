pipeline {
    agent any
     stages {
        stage('Get Code') {
        agent any
            steps {
                // Obtener cÃ³digo del rep
                    sh '''
                        echo " Obtenemos el codigo "
                        whoami
                        uname -a
                        echo ${WORKSPACE}
                    '''
                git branch: 'master', url: 'git@github.com:galopez84/helloworldLynx.git'

                // Stash: 
                stash name: 'workspace', includes: '**/*'
            }
        }

        stage('Run TESTS') {
        parallel {
            stage('TEST Unit') {
            agent { label 'linux'}
                  steps {
                      catchError(buildResult: 'UNSTABLE', stageResult: 'SUCCESS') {
                        unstash 'workspace'
                          sh '''
                              yum install pip -y
                              pip install pytest
                              export PYTHONPATH=$WORKSPACE
                              pytest --junitxml=result-unit.xml test/unit
                              whoami
                              uname -a
                              echo ${WORKSPACE}
                          '''
                    // Stash: 
                        stash name: 'result-unit', includes: '*result*'
                     }
                  }
              }   
      
              stage('TEST Rest') {
              agent { label 'ansible'}
                  steps {
                      catchError(buildResult: 'UNSTABLE', stageResult: 'SUCCESS') {
                      unstash 'workspace'
                      sh '''
                          export FLASK_APP=app/api.py
                          export FLASK_ENV=development
                          export WIREMOCK_JAR=/root/wiremock/wiremock-standalone-3.3.1.jar
                          export URL_WIREMOCK=https://repo1.maven.org/maven2/org/wiremock/wiremock-standalone/3.3.1/wiremock-standalone-3.3.1.jar
                          yum install pip -y
                          pip install flask
                          pip install pytest
                          nohup flask run &
                          wget -q -O $WIREMOCK_JAR $URL_WIREMOCK
                          nohup java -jar $WIREMOCK_JAR --port 9090 --root-dir $WORKSPACE/test/wiremock &
                          sleep 2
                          export PYTHONPATH=%WORKSPACE%
                          pytest --junitxml=result-rest.xml test/rest
                          whoami
                          uname -a
                          echo ${WORKSPACE}
                          ls -lrt
                      '''
                    // Stash: 
                    stash name: 'result-rest', includes: '*result*'
                        }    
                    }
                }

                stage ('TEST - Flake8') {
                    agent { label 'linux'}
                        steps {
                            catchError(buildResult: 'UNSTABLE', stageResult: 'SUCCESS') {
                            unstash 'workspace'
                            sh '''
                                    yum install pip -y
                                    pip install flake8
                                    flake8 --format=pylint --exit-zero app > flake8.out
                                    whoami
                                    uname -a
                                '''
                            recordIssues tools: [flake8(name: 'Flake8', pattern: 'flake8.out')], qualityGates: [[threshold: 8, type: 'TOTAL', unstable: true], [threshold: 10, type: 'TOTAL', unstable: false]]
                        }
                        }
                    }

                stage ('TEST - Security') {
                    agent { label 'ansible'}
                    steps {
                        catchError(buildResult: 'UNSTABLE', stageResult: 'SUCCESS') {
                        unstash 'workspace'
                        sh '''
                            pip install bandit
                            bandit --exit-zero -r . -f custom -o bandit.out --severity-level medium --msg-template "{abspath}:{line}: [{test_id}] {msg}"
                            whoami
                            uname -a
                            '''
                        recordIssues tools: [pyLint(name: 'Bandit', pattern: 'bandit.out')], qualityGates: [[threshold:2, type: 'TOTAL', unstable: true], [threshold: 4, type: 'TOTAL', unstable: false]]
                    }
                    }
                }

                stage ('Cobertura') {
                agent { label 'linux'}
                    steps {
                        unstash 'workspace'
                        sh '''
                            pip install coverage
                            coverage run --branch --source=app --omit=app/__init__.py,app/api.py -m pytest test/unit
                            coverage xml
                            whoami
                            uname -a                
                            '''
                        cobertura autoUpdateHealth: false, autoUpdateStability: false, coberturaReportFile: 'coverage.xml', conditionalCoverageTargets: '100, 80, 90', failNoReports: false, failUnhealthy: false, failUnstable: false, lineCoverageTargets: '100, 85, 95', maxNumberOfBuilds: 0, onlyStable: false, sourceEncoding: 'ASCII', zoomCoverageChart: false
                    }
                }


        }
        }
        stage('Results Test UNIT - REST') {
        agent { label 'linux'}
            steps {
                unstash 'result-rest'
                unstash 'result-unit'
                    sh '''
                          whoami
                          uname -a
                          echo ${WORKSPACE}
                          ls -lrt
                      '''
                junit 'result*.xml' 
            }
        }


        stage ('Performance') {
        agent { label 'ansible'}
            steps {
                unstash 'workspace'
                sh '''
                    export FLASK_APP=app/api.py
                    export FLASK_ENV=development
                    export WIREMOCK_JAR=/root/wiremock/wiremock-standalone-3.3.1.jar
                    export URL_WIREMOCK=https://repo1.maven.org/maven2/org/wiremock/wiremock-standalone/3.3.1/wiremock-standalone-3.3.1.jar
                    yum install pip -y
                    pip install flask
                    pip install pytest
                    nohup flask run &
                    wget -q -O $WIREMOCK_JAR $URL_WIREMOCK
                    nohup java -jar $WIREMOCK_JAR --port 9090 --root-dir $WORKSPACE/test/wiremock &
                    sleep 2
                    export JMETER_HOME=/opt/jmeter/apache-jmeter-5.6.2
                    $JMETER_HOME/bin/jmeter -n -t test/jmeter/flask.jmx -f -l result_test1_jmter.jtl
                    '''
                perfReport sourceDataFiles: 'result_test1_jmter.jtl'
            }
        }


    }
    }

